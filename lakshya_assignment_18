Question 1 - Create a function that takes a list of non-negative integers and strings and return a new list
without the strings.

Answer1 -  This is the below fuction 
def filter_non_negative_integers(input_list):
    return [x for x in input_list if isinstance(x, int) and x >= 0]

# Test cases
mixed_list = [1, 2, 'apple', 3, 'banana', 4, 'cherry']
result_list = filter_non_negative_integers(mixed_list)
print(result_list)  # ➞ [1, 2, 3, 4]

Question2 -The &quot;Reverser&quot; takes a string as input and returns that string in reverse order, with the
opposite case.

Answer2 - 
def reverser(input_string):
    reversed_string = input_string[::-1]  # Reverse the string
    reversed_string = ''.join([char.upper() if char.islower() else char.lower() for char in reversed_string])
    return reversed_string

# Test case
input_str = "Hello World"
reversed_str = reverser(input_str)
print(reversed_str)  # ➞ "DLROw OLLEh"

Question 3 -You can assign variables from lists like this:
lst = [1, 2, 3, 4, 5, 6]
first = lst[0]
middle = lst[1:-1]
last = lst[-1]
print(first) ➞ outputs 1
print(middle) ➞ outputs [2, 3, 4, 5]
print(last) ➞ outputs 6

Answer3 -
writeyourcodehere = [1, 2, 3, 4, 5, 6]

# Using destructuring assignment
first, *middle, last = writeyourcodehere

# Print the variables
print(first)    # ➞ 1
print(middle)   # ➞ [2, 3, 4, 5]
print(last)     # ➞ 6


Question 4
Write a function that calculates the factorial of a number recursively.
Examples
factorial(5) ➞ 120
factorial(3) ➞ 6
factorial(1) ➞ 1
factorial(0) ➞ 1

Answer 4 -def factorial(n):
    if n == 0 or n == 1:
        return 1
    else:
        return n * factorial(n - 1)

# Test cases
print(factorial(5))  # ➞ 120
print(factorial(3))  # ➞ 6
print(factorial(1))  # ➞ 1
print(factorial(0))  # ➞ 1


Question 5 -Write a function that moves all elements of one type to the end of the list.
Examples
move_to_end([1, 3, 2, 4, 4, 1], 1) ➞ [3, 2, 4, 4, 1, 1]
# Move all the 1s to the end of the array.
move_to_end([7, 8, 9, 1, 2, 3, 4], 9) ➞ [7, 8, 1, 2, 3, 4, 9]
move_to_end([&quot;a&quot;, &quot;a&quot;, &quot;a&quot;, &quot;b&quot;], &quot;a&quot;) ➞ [&quot;b&quot;, &quot;a&quot;, &quot;a&quot;, &quot;a&quot;]

Answer 5 -
def move_to_end(lst, element_to_move):
    return [x for x in lst if x != element_to_move] + [x for x in lst if x == element_to_move]

# Test cases
print(move_to_end([1, 3, 2, 4, 4, 1], 1))  # ➞ [3, 2, 4, 4, 1, 1]
print(move_to_end([7, 8, 9, 1, 2, 3, 4], 9))  # ➞ [7, 8, 1, 2, 3, 4, 9]
print(move_to_end(["a", "a", "a", "b"], "a"))  # ➞ ["b", "a", "a", "a"]
