Question1. Write a function that stutters a word as if someone is struggling to read it. The
first two letters are repeated twice with an ellipsis ... and space after each, and then the
word is pronounced with a question mark ?.
Examples
stutter(&quot;incredible&quot;) ➞ &quot;in... in... incredible?&quot;

Answer 1 - 
def stutter(word):
    if len(word) >= 2:
        stuttered_word = f"{word[:2]}... {word[:2]}... {word}?"
    else:
        stuttered_word = f"{word}?"
    return stuttered_word
print(stutter("incredible"))  # ➞ "in... in... incredible?"

Question 2 - 
Question 2.Create a function that takes an angle in radians and returns the corresponding
angle in degrees rounded to one decimal place.
Examples
radians_to_degrees(1) ➞ 57.3

ANswer 2- 
import math

def radians_to_degrees(radians):
    degrees = radians * (180 / math.pi)
    return round(degrees, 1)

# Test case
print(radians_to_degrees(1))  # ➞ 57.3


Question 3 - Question 3. In this challenge, establish if a given integer num is a Curzon number. If 1 plus
2 elevated to num is exactly divisible by 1 plus 2 multiplied by num, then num is a Curzon
number.
Given a non-negative integer num, implement a function that returns True if num is a Curzon
number, or False otherwise.
Examples
is_curzon(5) ➞ True
# 2 ** 5 + 1 = 33
# 2 * 5 + 1 = 11
# 33 is a multiple of 11

Answer  3- 
def is_curzon(num):
    numerator = 2 ** num + 1
    denominator = 2 * num + 1
    return numerator % denominator == 0

# Test case
print(is_curzon(5))  # ➞ True

Question 4 - 
Examples
area_of_hexagon(1) ➞ 2.6

Answer 4 - 
import math

def area_of_hexagon(x):
    area = (3 * math.sqrt(3) * x**2) / 2
    return round(area, 1)

# Test case
print(area_of_hexagon(1))  # ➞ 2.6


Question 5. Create a function that returns a base-2 (binary) representation of a base-10
(decimal) string number. To convert is simple: ((2) means base-2 and (10) means base-10)
010101001(2) = 1 + 8 + 32 + 128.
Going from right to left, the value of the most right bit is 1, now from that every bit to the left
will be x2 the value, value of an 8 bit binary numbers are (256, 128, 64, 32, 16, 8, 4, 2, 1).
Examples
binary(1) ➞ &quot;1&quot;
# 1*1 = 1

Answer 5 - 
def binary(decimal):
    if decimal == 0:
        return "0"  # Special case for 0
    
    binary_str = ""  # Initialize an empty string to store the binary representation

    while decimal > 0:
        remainder = decimal % 2
        binary_str = str(remainder) + binary_str
        decimal = decimal // 2  # Integer division by 2

    return binary_str

# Test case
print(binary(1))  # ➞ "1"


