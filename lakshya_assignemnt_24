Question1 -
Create a function that takes an integer and returns a list from 1 to the given number, where:
1. If the number can be divided evenly by 4, amplify it by 10 (i.e. return 10 times the
number).
2. If the number cannot be divided evenly by 4, simply return the number.

Answer 1 -def amplify_numbers(n):
    
    result = []
    for i in range(1, n + 1):
        
        if i % 4 == 0:
            result.append(i * 10)
        else:
            result.append(i)

    return result

# Test cases/////////////
print(amplify_numbers(4))  # ➞ [1, 2, 3, 40]
print(amplify_numbers(7))  # ➞ [1, 2, 3, 40, 5, 6, 7]
print(amplify_numbers(1))  # ➞ [1]

Question 2 - Create a function that takes a list of numbers and return the number that&#39;s unique.
Answer 2 -
def find_unique_number(numbers):
    num_count = {}
 for num in numbers:
        if num in num_count:
            num_count[num] += 1
        else:
            num_count[num] = 1

 
    for num, count in num_count.items():
        if count == 1:
            return num
print(find_unique_number([1, 1, 2, 2, 3]))  # ➞ 3
print(find_unique_number([5, 5, 2, 2, 1]))  # ➞ 1
print(find_unique_number([3, 3, 4, 5, 4]))  # ➞ 5

QUestion3 - Notes
Your task is to create a Circle constructor that creates a circle with a radius provided by an
argument. The circles constructed must have two getters getArea() (PIr^2) and
getPerimeter() (2PI*r) which give both respective areas and perimeter (circumference).     
Round results up to the nearest integer.

ANswer3 -
import math

class Circle:
    def __init__(self, radius):
        self.radius = radius

    def getArea(self):
        # Calculate the area using the formula PI * r^2
        area = math.pi * self.radius ** 2
        # Round the result up to the nearest integer
        return math.ceil(area)

    def getPerimeter(self):
        # Calculate the perimeter using the formula 2 * PI * r
        perimeter = 2 * math.pi * self.radius
        # Round the result up to the nearest integer
        return math.ceil(perimeter)


my_circle = Circle(5)


area = my_circle.getArea()
perimeter = my_circle.getPerimeter()

print("Area:", area)         # ➞ Area: 79
print("Perimeter:", perimeter)  # ➞ Perimeter: 32


Question4 - Create a function that takes a list of strings and return a list, sorted from shortest to longest.
Examples
sort_by_length([&quot;Google&quot;, &quot;Apple&quot;, &quot;Microsoft&quot;])
➞ [&quot;Apple&quot;, &quot;Google&quot;, &quot;Microsoft&quot;]
sort_by_length([&quot;Leonardo&quot;, &quot;Michelangelo&quot;, &quot;Raphael&quot;, &quot;Donatello&quot;])
➞ [&quot;Raphael&quot;, &quot;Leonardo&quot;, &quot;Donatello&quot;, &quot;Michelangelo&quot;]
sort_by_length([&quot;Turing&quot;, &quot;Einstein&quot;, &quot;Jung&quot;])
➞ [&quot;Jung&quot;, &quot;Turing&quot;, &quot;Einstein&quot;]
Notes
All test cases contain lists with strings of different lengths, so you won&#39;t have to deal with
multiple strings of the same length.

Answer 4 -  
def sort_by_length(strings):
    n = len(strings)
    

    for i in range(n - 1):
        for j in range(0, n - i - 1):
            if len(strings[j]) > len(strings[j + 1]):
                strings[j], strings[j + 1] = strings[j + 1], strings[j]
    
    return strings

input_list = ["Google", "Apple", "Microsoft"]
sorted_list = sort_by_length(input_list)
print(sorted_list)  # ➞ ["Apple", "Google", "Microsoft"]

QUestion5 -Create a function that validates whether three given integers form a Pythagorean triplet. The
sum of the squares of the two smallest integers must equal the square of the largest number to
be validated.

Answer 5 - 

def is_pythagorean_triplet(a, b, c):
    # Find the squares of all three integers
    a_squared = a ** 2
    b_squared = b ** 2
    c_squared = c ** 2

    smallest_squared = min(a_squared, b_squared, c_squared)
    largest_squared = max(a_squared, b_squared, c_squared)

    middle_squared = a_squared + b_squared + c_squared - smallest_squared - largest_squared
    return smallest_squared + middle_squared == largest_squared
print(is_pythagorean_triplet(3, 4, 5))     # ➞ True
print(is_pythagorean_triplet(5, 12, 13))   # ➞ True
print(is_pythagorean_triplet(8, 15, 17))   # ➞ True
print(is_pythagorean_triplet(7, 24, 25))   # ➞ True
print(is_pythagorean_triplet(6, 8, 10))    # ➞ True
print(is_pythagorean_triplet(1, 2,


