Question1. Create a function that takes three arguments a, b, c and returns the sum of the
numbers that are evenly divided by c from the range a, b inclusive.
Examples
evenly_divisible(1, 10, 20) ➞ 0
# No number between 1 and 10 can be evenly divided by 20.
evenly_divisible(1, 10, 2) ➞ 30
# 2 + 4 + 6 + 8 + 10 = 30
evenly_divisible(1, 10, 3) ➞ 18
# 3 + 6 + 9 = 18

Answer- def evenly_divisible(a, b, c):
    # Initialize a variable to store the sum
    total_sum = 0
    
    # Loop through the range [a, b]
    for num in range(a, b + 1):
        # Check if the number is evenly divisible by c
        if num % c == 0:
            # If yes, add it to the total sum
            total_sum += num
    
    # Return the final sum
    return total_sum

# Test cases
print(evenly_divisible(1, 10, 20))  # ➞ 0
print(evenly_divisible(1, 10, 2))   # ➞ 30
print(evenly_divisible(1, 10, 3))   # ➞ 18


Question2. Create a function that returns True if a given inequality expression is correct and
False otherwise.
Examples
correct_signs(&quot;3 &lt; 7 &lt; 11&quot;) ➞ True
correct_signs(&quot;13 &gt; 44 &gt; 33 &gt; 1&quot;) ➞ False
correct_signs(&quot;1 &lt; 2 &lt; 6 &lt; 9 &gt; 3&quot;) ➞ True


Anser 2- 
def correct_signs(expression):
    # Use the eval() function to evaluate the expression
    return eval(expression)

# Test cases
print(correct_signs("3 < 7 < 11"))      # ➞ True
print(correct_signs("13 > 44 > 33 > 1"))  # ➞ False
print(correct_signs("1 < 2 < 6 < 9 > 3"))  # ➞ True


Question3 - Question3. Create a function that replaces all the vowels in a string with a specified character.
Examples
replace_vowels(&quot;the aardvark&quot;, &quot;#&quot;) ➞ &quot;th# ##rdv#rk&quot;

Answer 3 - 
def replace_vowels(input_string, replacement_character):
    vowels = "aeiouAEIOU"
   
    result = ""
    for char in input_string:
        if char in vowels:
          
            result += replacement_character
        else:
    
            result += char
    return result
print(replace_vowels("the aardvark", "#"))  # ➞ "th# ##rdv#rk"

Question 4- Question4. Write a function that calculates the factorial of a number recursively.
Examples
factorial(5) ➞ 120

Answer 4 - 

def factorial(n):
    # Base case: factorial of 0 or 1 is 1
    if n == 0 or n == 1:
        return 1
    else:
        # Recursive case: factorial(n) = n * factorial(n-1)
        return n * factorial(n - 1)

# Test case
print(factorial(5))  # ➞ 120


Question 5
Hamming distance is the number of characters that differ between two strings.
To illustrate:
String1: &quot;abcbba&quot;
String2: &quot;abcbda&quot;
Hamming Distance: 1 - &quot;b&quot; vs. &quot;d&quot; is the only difference.
Create a function that computes the hamming distance between two strings.
Examples
hamming_distance(&quot;abcde&quot;, &quot;bcdef&quot;) ➞ 5

Answer 5 -

def hamming_distance(str1, str2):
    distance = 0
    if len(str1) != len(str2):
        raise ValueError("Input strings must have the same length")
    for i in range(len(str1)):
        if str1[i] != str2[i]:
            distance += 1

    return distance
print(hamming_distance("abcde", "bcdef"))  # ➞ 5

