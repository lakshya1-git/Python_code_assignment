Question 1 - 
Create a function that takes three parameters where:
 x is the start of the range (inclusive).
 y is the end of the range (inclusive).
 n is the divisor to be checked against.
Return an ordered list with numbers in the range that are divisible by the third parameter n.
Return an empty list if there are no numbers that are divisible by n.
Examples
list_operation(1, 10, 3) ➞ [3, 6, 9]
list_operation(7, 9, 2) ➞ [8]
list_operation(15, 20, 7) ➞ []

Answer 1 - 
def list_operation(x, y, n):
    result = []

    for num in range(x, y + 1):
        if num % n == 0:
            result.append(num)

    return result

# Test cases
print(list_operation(1, 10, 3))  # ➞ [3, 6, 9]
print(list_operation(7, 9, 2))   # ➞ [8]
print(list_operation(15, 20, 7))  # ➞ []

Question 2 - 
Create a function that takes in two lists and returns True if the second list follows the first list
by one element, and False otherwise. In other words, determine if the second list is the first
list shifted to the right by 1.
Examples
simon_says([1, 2], [5, 1]) ➞ True
simon_says([1, 2], [5, 5]) ➞ False
simon_says([1, 2, 3, 4, 5], [0, 1, 2, 3, 4]) ➞ True
simon_says([1, 2, 3, 4, 5], [5, 5, 1, 2, 3]) ➞ False
Notes
 Both input lists will be of the same length, and will have a minimum length of 2.
 The values of the 0-indexed element in the second list and the n-1th indexed element
in the first list do not matter.

Answer2 - 
def simon_says(list1, list2):
    # Check if the second list is a right shift of the first list by one element
    return list1[:-1] == list2[1:]

# Test cases
print(simon_says([1, 2], [5, 1]))           # ➞ True
print(simon_says([1, 2], [5, 5]))           # ➞ False
print(simon_says([1, 2, 3, 4, 5], [0, 1, 2, 3, 4]))   # ➞ True
print(simon_says([1, 2, 3, 4, 5], [5, 5, 1, 2, 3]))   # ➞ False

Question 3 - 
Question3
A group of friends have decided to start a secret society. The name will be the first letter of
each of their names, sorted in alphabetical order.
Create a function that takes in a list of names and returns the name of the secret society.

Examples
society_name([&quot;Adam&quot;, &quot;Sarah&quot;, &quot;Malcolm&quot;]) ➞ &quot;AMS&quot;
society_name([&quot;Harry&quot;, &quot;Newt&quot;, &quot;Luna&quot;, &quot;Cho&quot;]) ➞ &quot;CHLN&quot;
society_name([&quot;Phoebe&quot;, &quot;Chandler&quot;, &quot;Rachel&quot;, &quot;Ross&quot;, &quot;Monica&quot;, &quot;Joey&quot;])

Answer 3 - 
def society_name(names):
    # Extract the first letter of each name and sort them alphabetically
    initials = sorted([name[0] for name in names])
    # Join the initials to form the society name
    society_name = ''.join(initials)
    return society_name

# Test cases
print(society_name(["Adam", "Sarah", "Malcolm"]))  # ➞ "AMS"
print(society_name(["Harry", "Newt", "Luna", "Cho"]))  # ➞ "CHLN"
print(society_name(["Phoebe", "Chandler", "Rachel", "Ross", "Monica", "Joey"]))  # ➞ "CJMPRR"

Question4
An isogram is a word that has no duplicate letters. Create a function that takes a string and
returns either True or False depending on whether or not it&#39;s an &quot;isogram&quot;.
Examples
is_isogram(&quot;Algorism&quot;) ➞ True
is_isogram(&quot;PasSword&quot;) ➞ False
# Not case sensitive.
is_isogram(&quot;Consecutive&quot;) ➞ False

Answer 4 - 
def is_isogram(string):
    # Convert the string to lowercase to make it case-insensitive
    lowercase_string = string.lower()
    # Use a set to keep track of letters encountered
    seen = set()

    for char in lowercase_string:
        # If the character is already in the set, it's not an isogram
        if char in seen:
            return False
        seen.add(char)

    return True

# Test cases
print(is_isogram("Algorism"))  # ➞ True
print(is_isogram("PasSword"))  # ➞ False
print(is_isogram("Consecutive"))  # ➞ False

Question 5 - 
Create a function that takes a string and returns True or False, depending on whether the
characters are in order or not.
Examples
is_in_order(&quot;abc&quot;) ➞ True
is_in_order(&quot;edabit&quot;) ➞ False
is_in_order(&quot;123&quot;) ➞ True
is_in_order(&quot;xyzz&quot;) ➞ True
Notes
You don&#39;t have to handle empty strings.

Answer 5 - 

def is_in_order(string):
    # Convert the string to a list of characters
    chars = list(string)
    # Sort the list of characters
    sorted_chars = sorted(chars)
    # Compare the sorted list with the original list
    return chars == sorted_chars

# Test cases
print(is_in_order("abc"))    # ➞ True
print(is_in_order("edabit"))  # ➞ False
print(is_in_order("123"))    # ➞ True
print(is_in_order("xyzz"))   # ➞ True
