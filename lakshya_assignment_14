Question 1:
Define a class with a generator which can iterate the numbers, which are divisible by
7, between a given range 0 and n.

Annswer - class DivisibleBySevenGenerator:
    def __init__(self, n):
        self.n = n

    def generate_divisible_by_seven(self):
        for i in range(self.n + 1):
            if i % 7 == 0:
                yield i

# Usage example:
n = 50  # You can replace this with any positive integer
generator = DivisibleBySevenGenerator(n)
for num in generator.generate_divisible_by_seven():
    print(num)

Question 2:
Write a program to compute the frequency of the words from the input. The output
should output after sorting the key alphanumerically.
Suppose the following input is supplied to the program:
New to Python or choosing between Python 2 and Python 3? Read Python 2 or
Python 3.
Then, the output should be:
2:2
3.:1
3?:1
New:1
Python:5
Read:1
and:1
between:1
choosing:1
or:2
to:1

ANswer 2 - 
# Read input from the user
input_str = input("Enter a sentence: ")

# Split the input into words
words = input_str.split()

# Create a dictionary to store word frequencies
word_freq = {}

# Count the frequency of each word
for word in words:
    word = word.strip('.,?!')
    word = word.lower()
    if word in word_freq:
        word_freq[word] += 1
    else:
        word_freq[word] = 1
sorted_words = sorted(word_freq.keys())
for word in sorted_words:
    print(f"{word}:{word_freq[word]}")

Question 3:

Define a class Person and its two child classes: Male and Female. All classes have a
method &quot;getGender&quot; which can print &quot;Male&quot; for Male class and &quot;Female&quot; for Female
class.

Answer 3 - 
class Person:
    def getGender(self):
        pass

class Male(Person):
    def getGender(self):
        print("Male")

class Female(Person):
    def getGender(self):
        print("Female")

# Example usage:
person = Person()
male = Male()
female = Female()

person.getGender()  # No output (method in the Person class does nothing)
male.getGender()    # Output: "Male"
female.getGender()  # Output: "Female"

Question 4 - 
Question 4:
Please write a program to generate all sentences where subject is in [&quot;I&quot;, &quot;You&quot;] and
verb is in [&quot;Play&quot;, &quot;Love&quot;] and the object is in [&quot;Hockey&quot;,&quot;Football&quot;].


Answer 4 - \
subjects = ["I", "You"]
verbs = ["Play", "Love"]
objects = ["Hockey", "Football"]

# Generate and print all sentences
for subject in subjects:
    for verb in verbs:
        for obj in objects:
            sentence = f"{subject} {verb} {obj}."
            print(sentence)

Question 5:
Please write a program to compress and decompress the string &quot;hello world!hello
world!hello world!hello world!&quot;.

Answer 5 - 

import zlib

original_string = "hello world!hello world!hello world!hello world!"

compressed_data = zlib.compress(original_string.encode())

decompressed_data = zlib.decompress(compressed_data)

decompressed_string = decompressed_data.decode()
print("Original String:", original_string)
print("Compressed Data:", compressed_data)
print("Decompressed String:", decompressed_string)

Question 6:
Please write a binary search function which searches an item in a sorted list. The
function should return the index of element to be searched in the list.

Answer 6 - 
def binary_search(sorted_list, target):
    left, right = 0, len(sorted_list) - 1

    while left <= right:
        mid = (left + right) // 2  # Calculate the middle index

        if sorted_list[mid] == target:
            return mid  # Found the target, return its index
        elif sorted_list[mid] < target:
            left = mid + 1  # Adjust the left boundary
        else:
            right = mid - 1  # Adjust the right boundary

    return -1  # Target not found in the list

sorted_list = [1, 3, 5, 7, 9, 11, 13, 15]
target = 7

result = binary_search(sorted_list, target)

if result != -1:
    print(f"Element {target} found at index {result}")
else:
    print(f"Element {target} not found in the list")

